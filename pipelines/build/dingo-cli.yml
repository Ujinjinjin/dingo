trigger:
  batch: true
  branches:
    include:
    - master
    - release/*
    - hotfix/*
    - feature/*
    - bug/*
  paths:
    include:
    - pipelines/build/dingo-cli.yml
    - pipelines/templates/build-template.yml
    - Src/Dingo.Cli/*
    - Src/Dingo.Core/*
    - Src/Dingo.Database/*

variables:
  - name: 'pipeline_name'
    value: 'Dingo CLI'
  - name: 'solution'
    value: 'Src/Dingo.sln'
  - name: 'project'
    value: 'Src/Dingo.Cli/Dingo.Cli.csproj'
  - name: 'pkg_name'
    value: 'dingo'
  - name: 'pkg_description'
    value: 'Database installer tool, based on incremental migration model'
  - name: 'buildConfiguration'
    value: 'Release'
  - name: 'major'
    value: 2
  - name: 'minor'
    value: 0
  - name: 'patch'
    value: $[counter('dingo_cli', 1)]

name: '${{ variables.pipeline_name }} - $(Rev:r)'

stages:
  - stage: 'Clear'
    displayName: 'Clear staging dir'
    jobs:
      - job: Clear
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: DeleteFiles@1
            displayName: 'clear artifact staging directory'
            inputs:
              SourceFolder: '$(Build.ArtifactStagingDirectory)'
              Contents: '$(Build.ArtifactStagingDirectory)/cli/*'

  - stage: 'Version'
    displayName: 'Calculate version'
    dependsOn: Clear
    condition: succeeded()
    jobs:
      - job: Version
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8.*'
              addToPath: true
              architecture: 'x64'

          - task: PythonScript@0
            displayName: 'set version to env'
            name: CalculateVersion
            inputs:
              scriptSource: 'filePath'
              scriptPath: 'tools/version.py'
              arguments: '--major $(major) --minor $(minor) --patch $(patch) --branch $(Build.SourceBranchName)'

          - task: CopyFiles@2
            displayName: 'copy release notes to artifact staging directory'
            inputs:
              SourceFolder: 'Src/Dingo.Cli'
              Contents: 'README.md'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/cli/'

          - task: CopyFiles@2
            displayName: 'copy tools to artifact staging directory'
            inputs:
              Contents: 'tools/*'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/cli'

          - task: PythonScript@0
            displayName: 'store environment variables'
            inputs:
              scriptSource: 'filePath'
              scriptPath: 'tools/store_variables.py'
              arguments: '--dest "$(Build.ArtifactStagingDirectory)/cli/variables.json" -v $(pkg_version)'

          - task: PublishBuildArtifacts@1
            displayName: 'publish build artifacts'
            inputs:
              PathToPublish: '$(Build.ArtifactStagingDirectory)/cli'
              ArtifactName: 'drop-version'
              publishLocation: 'Container'

  - stage: 'Build'
    displayName: 'Build packages'
    dependsOn: Version
    condition: succeeded()
    jobs:
      - job: Linux_x64
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          buildPlatform: 'x64'
          pkg_version: $[ stageDependencies.Version.Version.outputs['CalculateVersion.pkgVersion'] ]

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8.*'
              addToPath: true
              architecture: 'x64'

          - template: ../templates/build-template.yml
            parameters:
              solution: $(solution)
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)

          - template: ../templates/publish-linux-template.yml
            parameters:
              project: $(project)
              pkg_version: $(pkg_version)
              pkg_name: $(pkg_name)
              pkg_description: $(pkg_description)
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)

      - job: Linux_arm64
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          buildPlatform: 'arm64'
          pkg_version: $[ stageDependencies.Version.Version.outputs['CalculateVersion.pkgVersion'] ]

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.8.*'
              addToPath: true
              architecture: 'x64'

          - template: ../templates/build-template.yml
            parameters:
              solution: $(solution)
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)

          - template: ../templates/publish-linux-template.yml
            parameters:
              project: $(project)
              pkg_version: $(pkg_version)
              pkg_name: $(pkg_name)
              pkg_description: $(pkg_description)
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)

      - job: macOS_x64
        pool:
          vmImage: 'macOS-latest'
        variables:
          buildPlatform: 'x64'
          pkg_version: $[ stageDependencies.Version.Version.outputs['CalculateVersion.pkgVersion'] ]

        steps:
          - template: ../templates/build-template.yml
            parameters:
              solution: $(solution)
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)

          - template: ../templates/publish-macos-template.yml
            parameters:
              project: $(project)
              pkg_version: $(pkg_version)
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)

      - job: macOS_arm64
        pool:
          vmImage: 'macOS-latest'
        variables:
          buildPlatform: 'arm64'
          pkg_version: $[ stageDependencies.Version.Version.outputs['CalculateVersion.pkgVersion'] ]

        steps:
          - template: ../templates/build-template.yml
            parameters:
              solution: $(solution)
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)

          - template: ../templates/publish-macos-template.yml
            parameters:
              project: $(project)
              pkg_version: $(pkg_version)
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)
